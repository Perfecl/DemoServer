INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/deps/sdk)

SET(INPUT_DIR   ${CMAKE_CURRENT_SOURCE_DIR}/message)
FILE(GLOB PROTO_INPUT ${CMAKE_CURRENT_SOURCE_DIR}/message/*.proto)
FIND_PROGRAM(PROTOC protoc)
SET(PROTOC_C_OUT_FLAG --cpp_out)
SET(PROTO_GEN_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cpp)

FIND_PROGRAM(PYTHON python3)
SET(PY_GEN ${CMAKE_CURRENT_SOURCE_DIR}/cpp/message_factory_init.cpp)

FOREACH(PROTO_FILE ${PROTO_INPUT})
    GET_FILENAME_COMPONENT(PROTO_NAME ${PROTO_FILE} NAME_WE)
    SET(CUR_PROTO_GEN
        ${PROTO_GEN_DIR}/${PROTO_NAME}.pb.h
        ${PROTO_GEN_DIR}/${PROTO_NAME}.pb.cc
        )
    SET(PROTO_GEN
        ${PROTO_GEN}
        ${CUR_PROTO_GEN}
        )
    ADD_CUSTOM_COMMAND(
        OUTPUT ${CUR_PROTO_GEN}
        COMMAND ${PROTOC} ${PROTO_FILE} ${PROTOC_C_OUT_FLAG} ${PROTO_GEN_DIR} -I${INPUT_DIR}
        DEPENDS ${PROTOC} ${PROTO_FILE}
        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
        )
ENDFOREACH(PROTO_FILE ${PROTO_INPUT})

FILE(GLOB MESSAGE_SRC *.cpp *.h)
SOURCE_GROUP("" FILES ${MESSAGE_SRC})

ADD_CUSTOM_COMMAND(
    OUTPUT ${PY_GEN}
    COMMAND ${PYTHON} ${CMAKE_CURRENT_SOURCE_DIR}/parse.py
    DEPENDS ${PROTO_INPUT}
    WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
    )

ADD_LIBRARY(message STATIC
    ${MESSAGE_SRC}
    ${PY_GEN}
    ${PROTO_GEN}
    )
SET_SOURCE_FILES_PROPERTIES(
    ${PROTO_GEN}
    ${PY_GEN}
    PROPERTIES
    GENERATED TRUE)
TARGET_LINK_LIBRARIES(message ${PROTOBUF_LIBRARY})
TARGET_COMPILE_OPTIONS(message PRIVATE -O2)

